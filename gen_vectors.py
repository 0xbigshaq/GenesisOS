#!/usr/bin/env python3

'''
This is an interrupt dispatcher.
We cannot know the interrupt number that was triggered(between 0 to 255)
when the execution jumps to the ISR. To resolve that, we prepare 256 small
trampolines that will:
 1. put the interrupt number/IRQ on the stack
 2. jump to the `trap_entry` function
    2.1. In the `trap_entry` function, we'll generate a `trap_ctx_t` struct
         and jump to `handle_trap()`
'''

print('# generated by gen_vectors.py, DO NOT EDIT')
print('# handlers ')

print('.globl trap_entry\n')
for idx in range(0, 256):
    vect_asm   = f'.globl vector{idx}\n'
    vect_asm  += f'vector{idx}:\n'
    if not ((idx >= 8 and idx<=14) or idx==17 or idx==21):
        vect_asm += "\t#no error code\n"
        vect_asm += "\tpushl $0\n"
    
    vect_asm  += f'\tpushl ${idx}\n'
    vect_asm  += f'\tjmp trap_entry\n'
    print(vect_asm)

print('# vector table')
print('.data')
print('.globl vectors')
print('vectors:')
for idx in range(0, 256):
    print(f'\t.long vector{idx}')


